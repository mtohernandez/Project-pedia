{"ast":null,"code":"import { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n  getSidesCount() {\n    return 12;\n  }\n\n  async init(container) {\n    const options = container.actualOptions;\n\n    if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n      const shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t);\n\n      if (shapeOptions instanceof Array) {\n        const promises = [];\n\n        for (const character of shapeOptions) {\n          const charShape = character;\n          promises.push(loadFont(charShape.font, charShape.weight));\n        }\n\n        await Promise.allSettled(promises);\n      } else {\n        if (shapeOptions !== undefined) {\n          const charShape = shapeOptions;\n          await loadFont(charShape.font, charShape.weight);\n        }\n      }\n    }\n  }\n\n  draw(context, particle, radius, opacity) {\n    var _a, _b, _c;\n\n    const character = particle.shapeData;\n\n    if (character === undefined) {\n      return;\n    }\n\n    const textData = character.value;\n\n    if (textData === undefined) {\n      return;\n    }\n\n    const textParticle = particle;\n\n    if (textParticle.text === undefined) {\n      textParticle.text = textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n    }\n\n    const text = textParticle.text;\n    const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n    const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n    const size = Math.round(radius) * 2;\n    const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n    const fill = particle.fill;\n    const offsetX = text.length * radius / 2;\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    const pos = {\n      x: -offsetX,\n      y: radius / 2\n    };\n    context.globalAlpha = opacity;\n\n    if (fill) {\n      context.fillText(text, pos.x, pos.y);\n    } else {\n      context.strokeText(text, pos.x, pos.y);\n    }\n\n    context.globalAlpha = 1;\n  }\n\n}","map":{"version":3,"sources":["C:/SkyRing/Project Helena Shine/Website/website/node_modules/tsparticles-shape-text/esm/TextDrawer.js"],"names":["isInArray","itemFromArray","loadFont","validTypes","TextDrawer","getSidesCount","init","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","Array","promises","character","charShape","push","font","weight","Promise","allSettled","undefined","draw","context","particle","radius","opacity","_a","_b","_c","shapeData","textData","value","textParticle","text","randomIndexData","style","size","Math","round","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText"],"mappings":"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","sourcesContent":["import { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t);\n            if (shapeOptions instanceof Array) {\n                const promises = [];\n                for (const character of shapeOptions) {\n                    const charShape = character;\n                    promises.push(loadFont(charShape.font, charShape.weight));\n                }\n                await Promise.allSettled(promises);\n            }\n            else {\n                if (shapeOptions !== undefined) {\n                    const charShape = shapeOptions;\n                    await loadFont(charShape.font, charShape.weight);\n                }\n            }\n        }\n    }\n    draw(context, particle, radius, opacity) {\n        var _a, _b, _c;\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        const textParticle = particle;\n        if (textParticle.text === undefined) {\n            textParticle.text =\n                textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n        }\n        const text = textParticle.text;\n        const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n        const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n        const size = Math.round(radius) * 2;\n        const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n        const fill = particle.fill;\n        const offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}