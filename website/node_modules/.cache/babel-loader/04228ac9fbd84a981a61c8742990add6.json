{"ast":null,"code":"import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n  init(particle) {\n    var _a;\n\n    const container = particle.container,\n          options = particle.options,\n          spinOptions = options.move.spin;\n\n    if (spinOptions.enable) {\n      const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = particle.getPosition();\n      const distance = getDistance(pos, spinCenter);\n      const spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n\n  move(particle, delta) {\n    var _a, _b, _c;\n\n    var _d, _e;\n\n    const particleOptions = particle.options,\n          moveOptions = particleOptions.move;\n\n    if (!moveOptions.enable) {\n      return;\n    }\n\n    const container = particle.container,\n          slowFactor = getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n          diffFactor = 2,\n          moveSpeed = baseSpeed * speedFactor / diffFactor;\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity,\n          gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n    if (gravityOptions.enable && moveSpeed) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n\n    if (moveDrift && moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    const decay = particle.moveDecay;\n\n    if (decay != 1) {\n      particle.velocity.multTo(decay);\n    }\n\n    const velocity = particle.velocity.mult(moveSpeed),\n          maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n    if (gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n      velocity.y = gravityFactor * maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    const zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n\n      particle.position.addTo(velocity);\n\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    applyDistance(particle);\n  }\n\n}","map":{"version":3,"sources":["C:/SkyRing/Project Helena Shine/Website/website/node_modules/tsparticles-move-base/esm/BaseMover.js"],"names":["getDistance","getRangeMax","getRangeValue","applyDistance","applyPath","getProximitySpeedFactor","spin","BaseMover","init","particle","_a","container","options","spinOptions","move","enable","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","acceleration","retina","pixelRatio","center","direction","velocity","angle","radius","isEnabled","destroyed","delta","_b","_c","_d","_e","particleOptions","moveOptions","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","speedFactor","factor","diffFactor","gravityOptions","gravity","gravityFactor","inverse","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","Math","sin","cos"],"mappings":"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","sourcesContent":["import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = particle.getPosition();\n            const distance = getDistance(pos, spinCenter);\n            const spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        applyPath(particle, delta);\n        const gravityOptions = particle.gravity, gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}