{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, colorToHsl, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rgbToHsl } from \"tsparticles-engine\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return clamp(value, modeValue, particleValue);\n  }\n}\n\nexport class Bubbler extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n  }\n\n  reset(particle, force) {\n    if (!(!particle.bubble.inRange || force)) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  async interact() {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n      this.clickBubble();\n    } else {\n      divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = divMode(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  clickBubble() {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (!mouseClickPos) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = getDistance(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = getDistance(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n      particle.bubble.finalColor = colorToHsl(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/SkyRing/Project Helena Shine/Website/website/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"names":["Circle","ExternalInteractorBase","Rectangle","clamp","colorMix","colorToHsl","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromArray","mouseLeaveEvent","mouseMoveEvent","rgbToHsl","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","constructor","container","bubble","handleClickMode","mode","clicking","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","onHover","enable","position","onClick","clickPosition","hoverMode","clickMode","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","query","particles","quadTree","contains","getPosition","modes","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_a","_b","mouseClickPos","distance","queryCircle","Date","getTime","clickTime","sizeData","bubbleModeSize","size","opacityData","mousePos","pointDistance","status","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","mix","pColor","getFillColor"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, colorToHsl, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rgbToHsl, } from \"tsparticles-engine\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = colorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}