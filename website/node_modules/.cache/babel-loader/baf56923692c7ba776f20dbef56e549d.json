{"ast":null,"code":"import { clear, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, gradient, paintBase } from \"../Utils/CanvasUtils\";\nimport { colorToHsl, colorToRgb, getStyleFromHsl, getStyleFromRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    this.resize();\n    this.initStyle();\n    this.initCover();\n    this.initTrail();\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas) {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this.generatedCanvas;\n    this.element = canvas;\n    this.originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n        this.paintBase(this.coverColorStyle);\n      } else {\n        this.paintBase();\n      }\n    });\n  }\n\n  clear() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.resize();\n    const container = this.container,\n          needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n      width: this.element.offsetWidth * pxRatio,\n      height: this.element.offsetHeight * pxRatio\n    };\n\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  drawConnectLine(p1, p2) {\n    this.draw(ctx => {\n      var _a;\n\n      const lineStyle = this.lineStyle(p1, p2);\n\n      if (!lineStyle) {\n        return;\n      }\n\n      const pos1 = p1.getPosition(),\n            pos2 = p2.getPosition();\n      drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    });\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    const container = this.container;\n    this.draw(ctx => {\n      var _a;\n\n      const beginPos = particle.getPosition();\n      drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    });\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const radius = particle.getRadius();\n\n    if (radius <= 0) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    if (!pfColor && !psColor) {\n      return;\n    }\n\n    let [fColor, sColor] = this.getPluginParticleColors(particle);\n\n    if (!fColor || !sColor) {\n      if (!fColor) {\n        fColor = pfColor ? pfColor : undefined;\n      }\n\n      if (!sColor) {\n        sColor = psColor ? psColor : undefined;\n      }\n    }\n\n    const options = this.container.actualOptions,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n          opacity = (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1,\n          strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity,\n          zOpacity = opacity * zOpacityFactor,\n          zStrokeOpacity = strokeOpacity * zOpacityFactor;\n    const colorStyles = {\n      fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n    };\n    colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n    this.draw(ctx => {\n      const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n            container = this.container;\n\n      for (const updater of container.particles.updaters) {\n        if (updater.beforeDraw) {\n          updater.beforeDraw(particle);\n        }\n\n        if (updater.getColorStyles) {\n          const {\n            fill,\n            stroke\n          } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n\n          if (fill) {\n            colorStyles.fill = fill;\n          }\n\n          if (stroke) {\n            colorStyles.stroke = stroke;\n          }\n        }\n      }\n\n      drawParticle(container, ctx, particle, delta, colorStyles, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow);\n\n      for (const updater of container.particles.updaters) {\n        if (updater.afterDraw) {\n          updater.afterDraw(particle);\n        }\n      }\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = colorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  draw(cb) {\n    if (!this.context) {\n      return;\n    }\n\n    return cb(this.context);\n  }\n\n  initCover() {\n    const options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = colorToRgb(color);\n\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this.coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n\n  initTrail() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          fillColor = colorToRgb(trail.fillColor);\n\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this.trailFillColor = {\n        r: fillColor.r,\n        g: fillColor.g,\n        b: fillColor.b,\n        a: 1 / trail.length\n      };\n    }\n  }\n\n  getPluginParticleColors(particle) {\n    let fColor, sColor;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = colorToHsl(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = colorToHsl(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    const originalStyle = this.originalStyle;\n\n    if (options.fullScreen.enable) {\n      this.originalStyle = deepExtend({}, element.style);\n      element.style.setProperty(\"position\", \"fixed\", \"important\");\n      element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n      element.style.setProperty(\"top\", \"0\", \"important\");\n      element.style.setProperty(\"left\", \"0\", \"important\");\n      element.style.setProperty(\"width\", \"100%\", \"important\");\n      element.style.setProperty(\"height\", \"100%\", \"important\");\n    } else if (originalStyle) {\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n\n      const value = options.style[key];\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n\n  paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n\n  lineStyle(p1, p2) {\n    return this.draw(ctx => {\n      const options = this.container.actualOptions,\n            connectOptions = options.interactivity.modes.connect;\n      return gradient(ctx, p1, p2, connectOptions.links.opacity);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/SkyRing/Project Helena Shine/Website/website/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"names":["clear","drawConnectLine","drawGrabLine","drawParticle","drawParticlePlugin","drawPlugin","gradient","paintBase","colorToHsl","colorToRgb","getStyleFromHsl","getStyleFromRgb","deepExtend","generatedAttribute","Canvas","constructor","container","size","height","width","context","generatedCanvas","init","resize","initStyle","initCover","initTrail","initBackground","paint","loadCanvas","canvas","_a","element","remove","dataset","originalStyle","style","offsetHeight","offsetWidth","getContext","retina","destroy","draw","ctx","options","actualOptions","backgroundMask","enable","cover","coverColorStyle","trail","particles","move","length","trailFillColor","windowResize","needsRefresh","updateActualOptions","setDensity","plugin","plugins","undefined","refresh","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","p1","p2","lineStyle","pos1","getPosition","pos2","linksWidth","particle","lineColor","opacity","mousePos","beginPos","delta","_b","_c","_d","_e","_f","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","getPluginParticleColors","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","bubble","value","strokeOpacity","stroke","zOpacity","zStrokeOpacity","colorStyles","fill","zSizeFactor","sizeRate","updater","updaters","beforeDraw","getColorStyles","composite","shadow","afterDraw","background","elementStyle","color","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","cb","coverRgb","coverColor","r","g","b","a","fillColor","particleFillColor","particleStrokeColor","fullScreen","setProperty","toString","top","left","key","baseColor","connectOptions","interactivity","modes","connect","links"],"mappings":"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","sourcesContent":["import { clear, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, gradient, paintBase, } from \"../Utils/CanvasUtils\";\nimport { colorToHsl, colorToRgb, getStyleFromHsl, getStyleFromRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        this.initStyle();\n        this.initCover();\n        this.initTrail();\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this.paintBase(this.coverColorStyle);\n            }\n            else {\n                this.paintBase();\n            }\n        });\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    drawConnectLine(p1, p2) {\n        this.draw((ctx) => {\n            var _a;\n            const lineStyle = this.lineStyle(p1, p2);\n            if (!lineStyle) {\n                return;\n            }\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n        });\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        const container = this.container;\n        this.draw((ctx) => {\n            var _a;\n            const beginPos = particle.getPosition();\n            drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n        });\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        let [fColor, sColor] = this.getPluginParticleColors(particle);\n        if (!fColor || !sColor) {\n            if (!fColor) {\n                fColor = pfColor ? pfColor : undefined;\n            }\n            if (!sColor) {\n                sColor = psColor ? psColor : undefined;\n            }\n        }\n        const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1, strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor;\n        const colorStyles = {\n            fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n        };\n        colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n        this.draw((ctx) => {\n            const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate, container = this.container;\n            for (const updater of container.particles.updaters) {\n                if (updater.beforeDraw) {\n                    updater.beforeDraw(particle);\n                }\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n            }\n            drawParticle(container, ctx, particle, delta, colorStyles, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow);\n            for (const updater of container.particles.updaters) {\n                if (updater.afterDraw) {\n                    updater.afterDraw(particle);\n                }\n            }\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = colorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    draw(cb) {\n        if (!this.context) {\n            return;\n        }\n        return cb(this.context);\n    }\n    initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = colorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this.coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = colorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this.trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const [, plugin] of this.container.plugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = colorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = colorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        const originalStyle = this.originalStyle;\n        if (options.fullScreen.enable) {\n            this.originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else if (originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    lineStyle(p1, p2) {\n        return this.draw((ctx) => {\n            const options = this.container.actualOptions, connectOptions = options.interactivity.modes.connect;\n            return gradient(ctx, p1, p2, connectOptions.links.opacity);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}