{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particles_engine;\n\nimport { calcPositionFromSize, getRangeMax, getRangeMin, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { loadParticlesOptions } from \"../Utils/Utils\";\nexport class Particles {\n  constructor(engine, container) {\n    this.container = container;\n\n    _Particles_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.freqs.links = new Map();\n    this.freqs.triangles = new Map();\n    let handled = false;\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    container.pathGenerator.init(container);\n  }\n\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n\n      __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleRemoved\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n    }\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n\n  async update(delta) {\n    const container = this.container,\n          particlesToDelete = [];\n    container.pathGenerator.update();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n\n      particle.ignoresResizeRatio = false;\n      particle.bubble.inRange = false;\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      for (const mover of this.movers) {\n        if (mover.isEnabled(particle)) {\n          mover.move(particle, delta);\n        }\n      }\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    await this.interactionManager.externalInteract(delta);\n\n    for (const particle of container.particles.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n\n      if (!particle.destroyed && !particle.spawning) {\n        await this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  async draw(delta) {\n    const container = this.container,\n          canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    container.canvas.clear();\n    await this.update(delta);\n\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions, group) {\n    const container = this.container,\n          options = container.actualOptions,\n          limit = options.particles.number.limit * container.density;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this.pushParticle(position, overrideOptions, group);\n  }\n\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split;\n    const options = loadParticlesOptions(parent.options);\n    const factor = getValue(splitOptions.factor);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n          position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  getLinkFrequency(p1, p2) {\n    const range = setRangeValue(p1.id, p2.id),\n          key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n    let res = this.freqs.links.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.links.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.freqs.triangles.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.triangles.set(key, res);\n    }\n\n    return res;\n  }\n\n  addManualParticles() {\n    const container = this.container,\n          options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      this.addParticle(calcPositionFromSize({\n        size: container.canvas.size,\n        position: particle.position\n      }), particle.options);\n    }\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  handleClickMode(mode) {\n    this.interactionManager.handleClickMode(mode);\n  }\n\n  applyDensity(options, manualCount, group) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number,\n          densityFactor = this.initDensityFactor(numberOptions.density),\n          optParticlesNumber = numberOptions.value,\n          optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n          particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n          particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element,\n          pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n\n      __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleAdded\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n\n}\n_Particles_engine = new WeakMap();","map":{"version":3,"sources":["C:/SkyRing/Project Helena Shine/Website/website/node_modules/tsparticles-engine/esm/Core/Particles.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particles_engine","calcPositionFromSize","getRangeMax","getRangeMin","getValue","randomInRange","setRangeValue","InteractionManager","Particle","Point","QuadTree","Rectangle","loadParticlesOptions","Particles","constructor","engine","container","nextId","array","zArray","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","canvasSize","canvas","size","linksColors","quadTree","width","height","movers","plugins","getMovers","updaters","getUpdaters","count","length","init","_a","options","actualOptions","handled","plugin","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","j","number","addParticle","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","dispatchEvent","data","remove","update","delta","particlesToDelete","resizeFactor","ignoresResizeRatio","position","x","y","bubble","inRange","destroyed","particleUpdate","mover","isEnabled","move","push","insert","getPosition","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","color","load","hsl","getFillColor","min","max","offset","sizeOffset","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","range","key","res","Math","random","getTriangleFrequency","p3","id1","id2","id3","manualParticles","setDensity","applyDensity","handleClickMode","mode","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","canAdd","e","console","warn","WeakMap"],"mappings":"AAAA,IAAIA,sBAAsB,GAAI,QAAQ,KAAKA,sBAAd,IAAyC,UAAUC,QAAV,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,CAAxC,EAA2C;AAC7G,MAAID,IAAI,KAAK,GAAb,EAAkB,MAAM,IAAIE,SAAJ,CAAc,gCAAd,CAAN;AAClB,MAAIF,IAAI,KAAK,GAAT,IAAgB,CAACC,CAArB,EAAwB,MAAM,IAAIC,SAAJ,CAAc,+CAAd,CAAN;AACxB,MAAI,OAAOJ,KAAP,KAAiB,UAAjB,GAA8BD,QAAQ,KAAKC,KAAb,IAAsB,CAACG,CAArD,GAAyD,CAACH,KAAK,CAACK,GAAN,CAAUN,QAAV,CAA9D,EAAmF,MAAM,IAAIK,SAAJ,CAAc,yEAAd,CAAN;AACnF,SAAQF,IAAI,KAAK,GAAT,GAAeC,CAAC,CAACG,IAAF,CAAOP,QAAP,EAAiBE,KAAjB,CAAf,GAAyCE,CAAC,GAAGA,CAAC,CAACF,KAAF,GAAUA,KAAb,GAAqBD,KAAK,CAACO,GAAN,CAAUR,QAAV,EAAoBE,KAApB,CAAhE,EAA6FA,KAApG;AACH,CALD;;AAMA,IAAIO,sBAAsB,GAAI,QAAQ,KAAKA,sBAAd,IAAyC,UAAUT,QAAV,EAAoBC,KAApB,EAA2BE,IAA3B,EAAiCC,CAAjC,EAAoC;AACtG,MAAID,IAAI,KAAK,GAAT,IAAgB,CAACC,CAArB,EAAwB,MAAM,IAAIC,SAAJ,CAAc,+CAAd,CAAN;AACxB,MAAI,OAAOJ,KAAP,KAAiB,UAAjB,GAA8BD,QAAQ,KAAKC,KAAb,IAAsB,CAACG,CAArD,GAAyD,CAACH,KAAK,CAACK,GAAN,CAAUN,QAAV,CAA9D,EAAmF,MAAM,IAAIK,SAAJ,CAAc,0EAAd,CAAN;AACnF,SAAOF,IAAI,KAAK,GAAT,GAAeC,CAAf,GAAmBD,IAAI,KAAK,GAAT,GAAeC,CAAC,CAACG,IAAF,CAAOP,QAAP,CAAf,GAAkCI,CAAC,GAAGA,CAAC,CAACF,KAAL,GAAaD,KAAK,CAACS,GAAN,CAAUV,QAAV,CAA1E;AACH,CAJD;;AAKA,IAAIW,iBAAJ;;AACA,SAASC,oBAAT,EAA+BC,WAA/B,EAA4CC,WAA5C,EAAyDC,QAAzD,EAAmEC,aAAnE,EAAkFC,aAAlF,QAAwG,sBAAxG;AACA,SAASC,kBAAT,QAAmC,4BAAnC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,oBAAT,QAAqC,gBAArC;AACA,OAAO,MAAMC,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoB;AAC3B,SAAKA,SAAL,GAAiBA,SAAjB;;AACAhB,IAAAA,iBAAiB,CAACH,GAAlB,CAAsB,IAAtB,EAA4B,KAAK,CAAjC;;AACAT,IAAAA,sBAAsB,CAAC,IAAD,EAAOY,iBAAP,EAA0Be,MAA1B,EAAkC,GAAlC,CAAtB;;AACA,SAAKE,MAAL,GAAc,CAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IAAIC,GAAJ,EADE;AAETC,MAAAA,SAAS,EAAE,IAAID,GAAJ;AAFF,KAAb;AAIA,SAAKE,kBAAL,GAA0B,IAAIpB,kBAAJ,CAAuBT,sBAAsB,CAAC,IAAD,EAAOE,iBAAP,EAA0B,GAA1B,CAA7C,EAA6EgB,SAA7E,CAA1B;AACA,UAAMY,UAAU,GAAG,KAAKZ,SAAL,CAAea,MAAf,CAAsBC,IAAzC;AACA,SAAKC,WAAL,GAAmB,IAAIN,GAAJ,EAAnB;AACA,SAAKO,QAAL,GAAgB,IAAItB,QAAJ,CAAa,IAAIC,SAAJ,CAAc,CAACiB,UAAU,CAACK,KAAZ,GAAoB,CAAlC,EAAqC,CAACL,UAAU,CAACM,MAAZ,GAAqB,CAA1D,EAA8DN,UAAU,CAACK,KAAX,GAAmB,CAApB,GAAyB,CAAtF,EAA0FL,UAAU,CAACM,MAAX,GAAoB,CAArB,GAA0B,CAAnH,CAAb,EAAoI,CAApI,CAAhB;AACA,SAAKC,MAAL,GAAcrC,sBAAsB,CAAC,IAAD,EAAOE,iBAAP,EAA0B,GAA1B,CAAtB,CAAqDoC,OAArD,CAA6DC,SAA7D,CAAuErB,SAAvE,EAAkF,IAAlF,CAAd;AACA,SAAKsB,QAAL,GAAgBxC,sBAAsB,CAAC,IAAD,EAAOE,iBAAP,EAA0B,GAA1B,CAAtB,CAAqDoC,OAArD,CAA6DG,WAA7D,CAAyEvB,SAAzE,EAAoF,IAApF,CAAhB;AACH;;AACQ,MAALwB,KAAK,GAAG;AACR,WAAO,KAAKtB,KAAL,CAAWuB,MAAlB;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,QAAIC,EAAJ;;AACA,UAAM3B,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC4B,OAAO,GAAG5B,SAAS,CAAC6B,aAAtD;AACA,SAAKvB,UAAL,GAAkB,CAAlB;AACA,SAAKD,SAAL,GAAiB,KAAjB;AACA,SAAKE,KAAL,CAAWC,KAAX,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKF,KAAL,CAAWG,SAAX,GAAuB,IAAID,GAAJ,EAAvB;AACA,QAAIqB,OAAO,GAAG,KAAd;AACA,SAAKR,QAAL,GAAgBxC,sBAAsB,CAAC,IAAD,EAAOE,iBAAP,EAA0B,GAA1B,CAAtB,CAAqDoC,OAArD,CAA6DG,WAA7D,CAAyEvB,SAAzE,EAAoF,IAApF,CAAhB;AACA,SAAKW,kBAAL,CAAwBe,IAAxB;;AACA,SAAK,MAAM,GAAGK,MAAH,CAAX,IAAyB/B,SAAS,CAACoB,OAAnC,EAA4C;AACxC,UAAIW,MAAM,CAACC,uBAAP,KAAmCC,SAAvC,EAAkD;AAC9CH,QAAAA,OAAO,GAAGC,MAAM,CAACC,uBAAP,EAAV;AACH;;AACD,UAAIF,OAAJ,EAAa;AACT;AACH;AACJ;;AACD,SAAKI,kBAAL;;AACA,QAAI,CAACJ,OAAL,EAAc;AACV,WAAK,MAAMK,KAAX,IAAoBP,OAAO,CAACQ,SAAR,CAAkBC,MAAtC,EAA8C;AAC1C,cAAMC,YAAY,GAAGV,OAAO,CAACQ,SAAR,CAAkBC,MAAlB,CAAyBF,KAAzB,CAArB;;AACA,aAAK,IAAII,CAAC,GAAG,KAAKf,KAAb,EAAoBgB,CAAC,GAAG,CAA7B,EAAgCA,CAAC,IAAI,CAACb,EAAE,GAAGW,YAAY,CAACG,MAAnB,MAA+B,IAA/B,IAAuCd,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACpD,KAAvE,CAAD,IAAkFgE,CAAC,GAAGX,OAAO,CAACQ,SAAR,CAAkBK,MAAlB,CAAyBlE,KAA/I,EAAsJgE,CAAC,IAAIC,CAAC,EAA5J,EAAgK;AAC5J,eAAKE,WAAL,CAAiBT,SAAjB,EAA4BK,YAA5B,EAA0CH,KAA1C;AACH;AACJ;;AACD,WAAK,IAAII,CAAC,GAAG,KAAKf,KAAlB,EAAyBe,CAAC,GAAGX,OAAO,CAACQ,SAAR,CAAkBK,MAAlB,CAAyBlE,KAAtD,EAA6DgE,CAAC,EAA9D,EAAkE;AAC9D,aAAKG,WAAL;AACH;AACJ;;AACD1C,IAAAA,SAAS,CAAC2C,aAAV,CAAwBjB,IAAxB,CAA6B1B,SAA7B;AACH;;AACW,QAAN4C,MAAM,GAAG;AACX,SAAKC,KAAL;AACA,SAAKnB,IAAL;AACA,UAAM,KAAKoB,IAAL,CAAU;AAAEvE,MAAAA,KAAK,EAAE,CAAT;AAAYwE,MAAAA,MAAM,EAAE;AAApB,KAAV,CAAN;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAuC;AAAA,QAA/BC,QAA+B,uEAApB,CAAoB;AAAA,QAAjBf,KAAiB;AAAA,QAAVgB,QAAU;;AAC3C,QAAI,EAAEF,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,KAAKzB,KAA9B,CAAJ,EAA0C;AACtC;AACH;;AACD,QAAI4B,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIb,CAAC,GAAGU,KAAb,EAAoBG,OAAO,GAAGF,QAAV,IAAsBX,CAAC,GAAG,KAAKf,KAAnD,EAA0De,CAAC,EAA3D,EAA+D;AAC3D,YAAMc,QAAQ,GAAG,KAAKnD,KAAL,CAAWqC,CAAX,CAAjB;;AACA,UAAI,CAACc,QAAD,IAAaA,QAAQ,CAAClB,KAAT,KAAmBA,KAApC,EAA2C;AACvC;AACH;;AACDkB,MAAAA,QAAQ,CAACC,OAAT,CAAiBH,QAAjB;AACA,WAAKjD,KAAL,CAAWqD,MAAX,CAAkBhB,CAAC,EAAnB,EAAuB,CAAvB;AACA,YAAMiB,IAAI,GAAG,KAAKrD,MAAL,CAAYsD,OAAZ,CAAoBJ,QAApB,CAAb;AACA,WAAKlD,MAAL,CAAYoD,MAAZ,CAAmBC,IAAnB,EAAyB,CAAzB;AACAJ,MAAAA,OAAO;;AACPtE,MAAAA,sBAAsB,CAAC,IAAD,EAAOE,iBAAP,EAA0B,GAA1B,CAAtB,CAAqD0E,aAArD,CAAmE,iBAAnE,EAAsF;AAClF1D,QAAAA,SAAS,EAAE,KAAKA,SADkE;AAElF2D,QAAAA,IAAI,EAAE;AACFN,UAAAA;AADE;AAF4E,OAAtF;AAMH;AACJ;;AACDO,EAAAA,MAAM,CAACP,QAAD,EAAWlB,KAAX,EAAkBgB,QAAlB,EAA4B;AAC9B,SAAKH,QAAL,CAAc,KAAK9C,KAAL,CAAWuD,OAAX,CAAmBJ,QAAnB,CAAd,EAA4CpB,SAA5C,EAAuDE,KAAvD,EAA8DgB,QAA9D;AACH;;AACW,QAANU,MAAM,CAACC,KAAD,EAAQ;AAChB,UAAM9D,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC+D,iBAAiB,GAAG,EAAtD;AACA/D,IAAAA,SAAS,CAAC2C,aAAV,CAAwBkB,MAAxB;;AACA,SAAK,MAAM,GAAG9B,MAAH,CAAX,IAAyB/B,SAAS,CAACoB,OAAnC,EAA4C;AACxC,UAAIW,MAAM,CAAC8B,MAAP,KAAkB5B,SAAtB,EAAiC;AAC7BF,QAAAA,MAAM,CAAC8B,MAAP,CAAcC,KAAd;AACH;AACJ;;AACD,SAAK,MAAMT,QAAX,IAAuB,KAAKnD,KAA5B,EAAmC;AAC/B,YAAM8D,YAAY,GAAGhE,SAAS,CAACa,MAAV,CAAiBmD,YAAtC;;AACA,UAAIA,YAAY,IAAI,CAACX,QAAQ,CAACY,kBAA9B,EAAkD;AAC9CZ,QAAAA,QAAQ,CAACa,QAAT,CAAkBC,CAAlB,IAAuBH,YAAY,CAAC/C,KAApC;AACAoC,QAAAA,QAAQ,CAACa,QAAT,CAAkBE,CAAlB,IAAuBJ,YAAY,CAAC9C,MAApC;AACH;;AACDmC,MAAAA,QAAQ,CAACY,kBAAT,GAA8B,KAA9B;AACAZ,MAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,GAA0B,KAA1B;;AACA,WAAK,MAAM,GAAGvC,MAAH,CAAX,IAAyB,KAAK/B,SAAL,CAAeoB,OAAxC,EAAiD;AAC7C,YAAIiC,QAAQ,CAACkB,SAAb,EAAwB;AACpB;AACH;;AACD,YAAIxC,MAAM,CAACyC,cAAX,EAA2B;AACvBzC,UAAAA,MAAM,CAACyC,cAAP,CAAsBnB,QAAtB,EAAgCS,KAAhC;AACH;AACJ;;AACD,WAAK,MAAMW,KAAX,IAAoB,KAAKtD,MAAzB,EAAiC;AAC7B,YAAIsD,KAAK,CAACC,SAAN,CAAgBrB,QAAhB,CAAJ,EAA+B;AAC3BoB,UAAAA,KAAK,CAACE,IAAN,CAAWtB,QAAX,EAAqBS,KAArB;AACH;AACJ;;AACD,UAAIT,QAAQ,CAACkB,SAAb,EAAwB;AACpBR,QAAAA,iBAAiB,CAACa,IAAlB,CAAuBvB,QAAvB;AACA;AACH;;AACD,WAAKrC,QAAL,CAAc6D,MAAd,CAAqB,IAAIpF,KAAJ,CAAU4D,QAAQ,CAACyB,WAAT,EAAV,EAAkCzB,QAAlC,CAArB;AACH;;AACD,SAAK,MAAMA,QAAX,IAAuBU,iBAAvB,EAA0C;AACtC,WAAKH,MAAL,CAAYP,QAAZ;AACH;;AACD,UAAM,KAAK1C,kBAAL,CAAwBoE,gBAAxB,CAAyCjB,KAAzC,CAAN;;AACA,SAAK,MAAMT,QAAX,IAAuBrD,SAAS,CAACoC,SAAV,CAAoBlC,KAA3C,EAAkD;AAC9C,WAAK,MAAM8E,OAAX,IAAsB,KAAK1D,QAA3B,EAAqC;AACjC0D,QAAAA,OAAO,CAACnB,MAAR,CAAeR,QAAf,EAAyBS,KAAzB;AACH;;AACD,UAAI,CAACT,QAAQ,CAACkB,SAAV,IAAuB,CAAClB,QAAQ,CAAC4B,QAArC,EAA+C;AAC3C,cAAM,KAAKtE,kBAAL,CAAwBuE,iBAAxB,CAA0C7B,QAA1C,EAAoDS,KAApD,CAAN;AACH;AACJ;;AACD,WAAO9D,SAAS,CAACa,MAAV,CAAiBmD,YAAxB;AACH;;AACS,QAAJlB,IAAI,CAACgB,KAAD,EAAQ;AACd,UAAM9D,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCY,UAAU,GAAG,KAAKZ,SAAL,CAAea,MAAf,CAAsBC,IAArE;AACA,SAAKE,QAAL,GAAgB,IAAItB,QAAJ,CAAa,IAAIC,SAAJ,CAAc,CAACiB,UAAU,CAACK,KAAZ,GAAoB,CAAlC,EAAqC,CAACL,UAAU,CAACM,MAAZ,GAAqB,CAA1D,EAA8DN,UAAU,CAACK,KAAX,GAAmB,CAApB,GAAyB,CAAtF,EAA0FL,UAAU,CAACM,MAAX,GAAoB,CAArB,GAA0B,CAAnH,CAAb,EAAoI,CAApI,CAAhB;AACAlB,IAAAA,SAAS,CAACa,MAAV,CAAiBgC,KAAjB;AACA,UAAM,KAAKgB,MAAL,CAAYC,KAAZ,CAAN;;AACA,QAAI,KAAKzD,SAAT,EAAoB;AAChB,WAAKF,MAAL,CAAYgF,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACnB,QAAF,CAAWoB,CAAX,GAAeF,CAAC,CAAClB,QAAF,CAAWoB,CAA1B,IAA+BF,CAAC,CAACG,EAAF,GAAOF,CAAC,CAACE,EAAnE;AACA,WAAKjF,UAAL,GAAkB,KAAKH,MAAL,CAAY,KAAKA,MAAL,CAAYsB,MAAZ,GAAqB,CAAjC,EAAoCyC,QAApC,CAA6CoB,CAA/D;AACA,WAAKjF,SAAL,GAAiB,KAAjB;AACH;;AACD,SAAK,MAAM,GAAG0B,MAAH,CAAX,IAAyB/B,SAAS,CAACoB,OAAnC,EAA4C;AACxCpB,MAAAA,SAAS,CAACa,MAAV,CAAiB2E,UAAjB,CAA4BzD,MAA5B,EAAoC+B,KAApC;AACH;;AACD,SAAK,MAAM2B,CAAX,IAAgB,KAAKtF,MAArB,EAA6B;AACzBsF,MAAAA,CAAC,CAAC3C,IAAF,CAAOgB,KAAP;AACH;AACJ;;AACDjB,EAAAA,KAAK,GAAG;AACJ,SAAK3C,KAAL,GAAa,EAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACH;;AACDyE,EAAAA,IAAI,CAACc,EAAD,EAAKC,KAAL,EAAYC,eAAZ,EAA6BzD,KAA7B,EAAoC;AACpC,SAAK0D,OAAL,GAAe,IAAf;;AACA,SAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,EAApB,EAAwBnD,CAAC,EAAzB,EAA6B;AACzB,WAAKG,WAAL,CAAiBiD,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACzB,QAArE,EAA+E0B,eAA/E,EAAgGzD,KAAhG;AACH;;AACD,SAAK0D,OAAL,GAAe,KAAf;AACH;;AACDnD,EAAAA,WAAW,CAACwB,QAAD,EAAW0B,eAAX,EAA4BzD,KAA5B,EAAmC;AAC1C,UAAMnC,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC4B,OAAO,GAAG5B,SAAS,CAAC6B,aAAtD;AAAA,UAAqEzB,KAAK,GAAGwB,OAAO,CAACQ,SAAR,CAAkBK,MAAlB,CAAyBrC,KAAzB,GAAiCJ,SAAS,CAAC8F,OAAxH;;AACA,QAAI1F,KAAK,GAAG,CAAZ,EAAe;AACX,YAAM2F,aAAa,GAAG,KAAKvE,KAAL,GAAa,CAAb,GAAiBpB,KAAvC;;AACA,UAAI2F,aAAa,GAAG,CAApB,EAAuB;AACnB,aAAKC,cAAL,CAAoBD,aAApB;AACH;AACJ;;AACD,WAAO,KAAKE,YAAL,CAAkB/B,QAAlB,EAA4B0B,eAA5B,EAA6CzD,KAA7C,CAAP;AACH;;AACD+D,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACrB,UAAMC,YAAY,GAAGD,MAAM,CAACvE,OAAP,CAAe0B,OAAf,CAAuB+C,KAA5C;AACA,UAAMzE,OAAO,GAAGhC,oBAAoB,CAACuG,MAAM,CAACvE,OAAR,CAApC;AACA,UAAMmB,MAAM,GAAG3D,QAAQ,CAACgH,YAAY,CAACrD,MAAd,CAAvB;AACAnB,IAAAA,OAAO,CAAC0E,KAAR,CAAcC,IAAd,CAAmB;AACfhI,MAAAA,KAAK,EAAE;AACHiI,QAAAA,GAAG,EAAEL,MAAM,CAACM,YAAP;AADF;AADQ,KAAnB;;AAKA,QAAI,OAAO7E,OAAO,CAACd,IAAR,CAAavC,KAApB,KAA8B,QAAlC,EAA4C;AACxCqD,MAAAA,OAAO,CAACd,IAAR,CAAavC,KAAb,IAAsBwE,MAAtB;AACH,KAFD,MAGK;AACDnB,MAAAA,OAAO,CAACd,IAAR,CAAavC,KAAb,CAAmBmI,GAAnB,IAA0B3D,MAA1B;AACAnB,MAAAA,OAAO,CAACd,IAAR,CAAavC,KAAb,CAAmBoI,GAAnB,IAA0B5D,MAA1B;AACH;;AACDnB,IAAAA,OAAO,CAAC2E,IAAR,CAAaH,YAAY,CAAChE,SAA1B;AACA,UAAMwE,MAAM,GAAGR,YAAY,CAACS,UAAb,GAA0BvH,aAAa,CAAC,CAAC6G,MAAM,CAACrF,IAAP,CAAYvC,KAAd,EAAqB4H,MAAM,CAACrF,IAAP,CAAYvC,KAAjC,CAAvC,GAAiF,CAAhG;AAAA,UAAmG2F,QAAQ,GAAG;AAC1GC,MAAAA,CAAC,EAAEgC,MAAM,CAACjC,QAAP,CAAgBC,CAAhB,GAAoB9E,aAAa,CAACuH,MAAD,CADsE;AAE1GxC,MAAAA,CAAC,EAAE+B,MAAM,CAACjC,QAAP,CAAgBE,CAAhB,GAAoB/E,aAAa,CAACuH,MAAD;AAFsE,KAA9G;AAIA,WAAO,KAAKX,YAAL,CAAkB/B,QAAlB,EAA4BtC,OAA5B,EAAqCuE,MAAM,CAAChE,KAA5C,EAAoDkB,QAAD,IAAc;AACpE,UAAIA,QAAQ,CAACvC,IAAT,CAAcvC,KAAd,GAAsB,GAA1B,EAA+B;AAC3B,eAAO,KAAP;AACH;;AACD8E,MAAAA,QAAQ,CAACyD,QAAT,CAAkBrF,MAAlB,GAA2BpC,aAAa,CAACC,aAAa,CAAC6G,MAAM,CAACW,QAAP,CAAgBrF,MAAjB,EAAyB4B,QAAQ,CAACyD,QAAT,CAAkBrF,MAA3C,CAAd,CAAxC;AACA4B,MAAAA,QAAQ,CAAC0D,UAAT,GAAsBZ,MAAM,CAACY,UAAP,GAAoB,CAA1C;AACA1D,MAAAA,QAAQ,CAAC2D,WAAT,GAAuB,IAAvB;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb5D,QAAAA,QAAQ,CAAC2D,WAAT,GAAuB,KAAvB;AACH,OAFS,EAEP,GAFO,CAAV;AAGA,aAAO,IAAP;AACH,KAXM,CAAP;AAYH;;AACDhB,EAAAA,cAAc,CAAC9C,QAAD,EAAWf,KAAX,EAAkB;AAC5B,SAAKa,QAAL,CAAc,CAAd,EAAiBE,QAAjB,EAA2Bf,KAA3B;AACH;;AACD+E,EAAAA,gBAAgB,CAACC,EAAD,EAAKC,EAAL,EAAS;AACrB,UAAMC,KAAK,GAAG/H,aAAa,CAAC6H,EAAE,CAAC5B,EAAJ,EAAQ6B,EAAE,CAAC7B,EAAX,CAA3B;AAAA,UAA2C+B,GAAG,GAAI,GAAEnI,WAAW,CAACkI,KAAD,CAAQ,IAAGnI,WAAW,CAACmI,KAAD,CAAQ,EAA7F;AACA,QAAIE,GAAG,GAAG,KAAKhH,KAAL,CAAWC,KAAX,CAAiBzB,GAAjB,CAAqBuI,GAArB,CAAV;;AACA,QAAIC,GAAG,KAAKtF,SAAZ,EAAuB;AACnBsF,MAAAA,GAAG,GAAGC,IAAI,CAACC,MAAL,EAAN;AACA,WAAKlH,KAAL,CAAWC,KAAX,CAAiB3B,GAAjB,CAAqByI,GAArB,EAA0BC,GAA1B;AACH;;AACD,WAAOA,GAAP;AACH;;AACDG,EAAAA,oBAAoB,CAACP,EAAD,EAAKC,EAAL,EAASO,EAAT,EAAa;AAC7B,QAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,IAAkB,CAACX,EAAE,CAAC5B,EAAJ,EAAQ6B,EAAE,CAAC7B,EAAX,EAAeoC,EAAE,CAACpC,EAAlB,CAAtB;;AACA,QAAIqC,GAAG,GAAGC,GAAV,EAAe;AACX,OAACA,GAAD,EAAMD,GAAN,IAAa,CAACA,GAAD,EAAMC,GAAN,CAAb;AACH;;AACD,QAAIA,GAAG,GAAGC,GAAV,EAAe;AACX,OAACA,GAAD,EAAMD,GAAN,IAAa,CAACA,GAAD,EAAMC,GAAN,CAAb;AACH;;AACD,QAAIF,GAAG,GAAGE,GAAV,EAAe;AACX,OAACA,GAAD,EAAMF,GAAN,IAAa,CAACA,GAAD,EAAME,GAAN,CAAb;AACH;;AACD,UAAMR,GAAG,GAAI,GAAEM,GAAI,IAAGC,GAAI,IAAGC,GAAI,EAAjC;AACA,QAAIP,GAAG,GAAG,KAAKhH,KAAL,CAAWG,SAAX,CAAqB3B,GAArB,CAAyBuI,GAAzB,CAAV;;AACA,QAAIC,GAAG,KAAKtF,SAAZ,EAAuB;AACnBsF,MAAAA,GAAG,GAAGC,IAAI,CAACC,MAAL,EAAN;AACA,WAAKlH,KAAL,CAAWG,SAAX,CAAqB7B,GAArB,CAAyByI,GAAzB,EAA8BC,GAA9B;AACH;;AACD,WAAOA,GAAP;AACH;;AACDrF,EAAAA,kBAAkB,GAAG;AACjB,UAAMlC,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC4B,OAAO,GAAG5B,SAAS,CAAC6B,aAAtD;;AACA,SAAK,MAAMwB,QAAX,IAAuBzB,OAAO,CAACmG,eAA/B,EAAgD;AAC5C,WAAKrF,WAAL,CAAiBzD,oBAAoB,CAAC;AAClC6B,QAAAA,IAAI,EAAEd,SAAS,CAACa,MAAV,CAAiBC,IADW;AAElCoD,QAAAA,QAAQ,EAAEb,QAAQ,CAACa;AAFe,OAAD,CAArC,EAGIb,QAAQ,CAACzB,OAHb;AAIH;AACJ;;AACDoG,EAAAA,UAAU,GAAG;AACT,UAAMpG,OAAO,GAAG,KAAK5B,SAAL,CAAe6B,aAA/B;;AACA,SAAK,MAAMM,KAAX,IAAoBP,OAAO,CAACQ,SAAR,CAAkBC,MAAtC,EAA8C;AAC1C,WAAK4F,YAAL,CAAkBrG,OAAO,CAACQ,SAAR,CAAkBC,MAAlB,CAAyBF,KAAzB,CAAlB,EAAmD,CAAnD,EAAsDA,KAAtD;AACH;;AACD,SAAK8F,YAAL,CAAkBrG,OAAO,CAACQ,SAA1B,EAAqCR,OAAO,CAACmG,eAAR,CAAwBtG,MAA7D;AACH;;AACDyG,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,SAAKxH,kBAAL,CAAwBuH,eAAxB,CAAwCC,IAAxC;AACH;;AACDF,EAAAA,YAAY,CAACrG,OAAD,EAAUwG,WAAV,EAAuBjG,KAAvB,EAA8B;AACtC,QAAIR,EAAJ;;AACA,QAAI,EAAE,CAACA,EAAE,GAAGC,OAAO,CAACa,MAAR,CAAeqD,OAArB,MAAkC,IAAlC,IAA0CnE,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAAC0G,MAAxE,CAAJ,EAAqF;AACjF;AACH;;AACD,UAAMC,aAAa,GAAG1G,OAAO,CAACa,MAA9B;AAAA,UAAsC8F,aAAa,GAAG,KAAKC,iBAAL,CAAuBF,aAAa,CAACxC,OAArC,CAAtD;AAAA,UAAqG2C,kBAAkB,GAAGH,aAAa,CAAC/J,KAAxI;AAAA,UAA+ImK,iBAAiB,GAAGJ,aAAa,CAAClI,KAAd,GAAsB,CAAtB,GAA0BkI,aAAa,CAAClI,KAAxC,GAAgDqI,kBAAnN;AAAA,UAAuOE,eAAe,GAAGnB,IAAI,CAACd,GAAL,CAAS+B,kBAAT,EAA6BC,iBAA7B,IAAkDH,aAAlD,GAAkEH,WAA3T;AAAA,UAAwUQ,cAAc,GAAGpB,IAAI,CAACd,GAAL,CAAS,KAAKlF,KAAd,EAAqB,KAAKtB,KAAL,CAAW2I,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAAC3G,KAAF,KAAYA,KAArC,EAA4CV,MAAjE,CAAzV;AACA,SAAKrB,KAAL,GAAakI,aAAa,CAAClI,KAAd,GAAsBmI,aAAnC;;AACA,QAAIK,cAAc,GAAGD,eAArB,EAAsC;AAClC,WAAK/D,IAAL,CAAU4C,IAAI,CAACuB,GAAL,CAASJ,eAAe,GAAGC,cAA3B,CAAV,EAAsD3G,SAAtD,EAAiEL,OAAjE,EAA0EO,KAA1E;AACH,KAFD,MAGK,IAAIyG,cAAc,GAAGD,eAArB,EAAsC;AACvC,WAAK3C,cAAL,CAAoB4C,cAAc,GAAGD,eAArC,EAAsDxG,KAAtD;AACH;AACJ;;AACDqG,EAAAA,iBAAiB,CAACQ,cAAD,EAAiB;AAC9B,UAAMhJ,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAI,CAACA,SAAS,CAACa,MAAV,CAAiBoI,OAAlB,IAA6B,CAACD,cAAc,CAACX,MAAjD,EAAyD;AACrD,aAAO,CAAP;AACH;;AACD,UAAMxH,MAAM,GAAGb,SAAS,CAACa,MAAV,CAAiBoI,OAAhC;AAAA,UAAyCC,OAAO,GAAGlJ,SAAS,CAACmJ,MAAV,CAAiBC,UAApE;AACA,WAAQvI,MAAM,CAACI,KAAP,GAAeJ,MAAM,CAACK,MAAvB,IAAkC8H,cAAc,CAACjG,MAAf,GAAwBmG,OAAO,IAAI,CAAnC,GAAuCF,cAAc,CAACK,IAAxF,CAAP;AACH;;AACDpD,EAAAA,YAAY,CAAC/B,QAAD,EAAW0B,eAAX,EAA4BzD,KAA5B,EAAmCmH,WAAnC,EAAgD;AACxD,QAAI;AACA,YAAMjG,QAAQ,GAAG,IAAI7D,QAAJ,CAAaV,sBAAsB,CAAC,IAAD,EAAOE,iBAAP,EAA0B,GAA1B,CAAnC,EAAmE,KAAKiB,MAAxE,EAAgF,KAAKD,SAArF,EAAgGkE,QAAhG,EAA0G0B,eAA1G,EAA2HzD,KAA3H,CAAjB;AACA,UAAIoH,MAAM,GAAG,IAAb;;AACA,UAAID,WAAJ,EAAiB;AACbC,QAAAA,MAAM,GAAGD,WAAW,CAACjG,QAAD,CAApB;AACH;;AACD,UAAI,CAACkG,MAAL,EAAa;AACT;AACH;;AACD,WAAKrJ,KAAL,CAAW0E,IAAX,CAAgBvB,QAAhB;AACA,WAAKlD,MAAL,CAAYyE,IAAZ,CAAiBvB,QAAjB;AACA,WAAKpD,MAAL;;AACAnB,MAAAA,sBAAsB,CAAC,IAAD,EAAOE,iBAAP,EAA0B,GAA1B,CAAtB,CAAqD0E,aAArD,CAAmE,eAAnE,EAAoF;AAChF1D,QAAAA,SAAS,EAAE,KAAKA,SADgE;AAEhF2D,QAAAA,IAAI,EAAE;AACFN,UAAAA;AADE;AAF0E,OAApF;;AAMA,aAAOA,QAAP;AACH,KAnBD,CAoBA,OAAOmG,CAAP,EAAU;AACNC,MAAAA,OAAO,CAACC,IAAR,CAAc,0BAAyBF,CAAE,EAAzC;AACA;AACH;AACJ;;AAlTkB;AAoTvBxK,iBAAiB,GAAG,IAAI2K,OAAJ,EAApB","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { calcPositionFromSize, getRangeMax, getRangeMin, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { loadParticlesOptions } from \"../Utils/Utils\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        _Particles_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init(container);\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n            __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleRemoved\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    async update(delta) {\n        const container = this.container, particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            particle.bubble.inRange = false;\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    async draw(delta) {\n        const container = this.container, canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = loadParticlesOptions(parent.options);\n        const factor = getValue(splitOptions.factor);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const range = setRangeValue(p1.id, p2.id), key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(calcPositionFromSize({\n                size: container.canvas.size,\n                position: particle.position,\n            }), particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    handleClickMode(mode) {\n        this.interactionManager.handleClickMode(mode);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number, densityFactor = this.initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleAdded\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n_Particles_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}